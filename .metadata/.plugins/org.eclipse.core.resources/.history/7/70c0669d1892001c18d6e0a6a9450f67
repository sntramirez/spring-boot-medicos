package com.integracion.crud;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.integracion.crud.model.service.JpaUserDetailsService;
import com.integracion.crud.security.filter.JWTAuthenticationFilter;
import com.integracion.crud.security.filter.JWTAuthorizationFilter;
import com.integracion.crud.security.jwt.JwtEntryPoint;
import com.integracion.crud.security.service.JWTService;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class MainSecurity extends WebSecurityConfigurerAdapter {

	@Autowired
	JpaUserDetailsService userDetailsService;

	
	@Autowired
	private JWTService jwtService;

	@Bean
	public static PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
    @Autowired
    JwtEntryPoint jwtEntryPoint;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
	}
	
    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }

    @Override
    protected AuthenticationManager authenticationManager() throws Exception {
        return super.authenticationManager();
    }

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.cors().and().csrf().disable()
		//.authorizeRequests().antMatchers("/**").permitAll()
		//.and()
		.authorizeRequests().antMatchers("/h2-console/**").permitAll()
		.anyRequest().authenticated()
		.and()
		.headers().frameOptions().disable()
		.and()
		.authorizeRequests().antMatchers("/api/**").permitAll()
		.and()
		.exceptionHandling().authenticationEntryPoint(jwtEntryPoint)
		.and()
		//.addFilter(new JWTAuthenticationFilter(authenticationManager(), jwtService))
		//.addFilter(new JWTAuthorizationFilter(authenticationManager(), jwtService))
		.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
	}

}
