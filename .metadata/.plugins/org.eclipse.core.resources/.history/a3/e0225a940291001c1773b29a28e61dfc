package com.integracion.crud.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.User.UserBuilder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.integracion.crud.security.service.UserDetailsServiceImpl;

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)

public class MainSecurity extends WebSecurityConfigurerAdapter {

	@Autowired
	UserDetailsServiceImpl userDetailsService;
	


	@Bean
	public static PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		PasswordEncoder encode = passwordEncoder();
		UserBuilder users = User.builder().passwordEncoder(encode::encode);
		
		auth.inMemoryAuthentication().withUser(users.username("admin").password("123").roles("ADMIN", "USER"))
				.withUser(users.username("andres").password("123").roles("USER"));

		// auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
	}
	
	


	@Override
	protected void configure(HttpSecurity http) throws Exception {

		//http.authorizeRequests().antMatchers("/", "/auth/**").permitAll().anyRequest();

		http.cors().and().csrf().disable()
		        .authorizeRequests()
		        .antMatchers("/**").permitAll()
		        .antMatchers("data").permitAll()
		        .anyRequest().authenticated()
				.and()
				.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
		
		

	}

}
